2019.12.24:	下午提醒潘子昂回复邮件（ok）
		跟踪O&k项目背光芯片信息确认（ok）
		跟踪MTK平台D&M项目背光芯片信息确认（ok）
（学校）元旦前：	完成开题提交（写完等待开题）
元旦后(1.10)：	背光驱动上库（目前RT代码还没有）（rt代码写完还没验证上库）
2020.1.10：	D&M和O&K项目背光芯片调试和屏幕点亮(还未进行调试)

开题前：
点子：
1、冷数据和热数据（缺点是这样会使保存冷数据的页更少擦除，因此必须将保存冷数据和热数据的块经常交换以确保损耗均衡。）
2、随机写入比序列写入要慢，但这并不总是对的，因为随机写入的速度实际上取决于工作负载的类型
3、将R-树拆成多个R-树，减少多次进行随机写（空闲合并？）
4、（优化GC算法：整合删除和合并）所有的写入数据全部顺序写入，添加数据时，顺序添加（最好一页一页的添加），删除数据时，数据不删除，当一块的数据达到百分25不需要的时候才将该块更新（参考预留空间）。
所以当索引结构发生改变时，只改变索引表。
5、块级别LRU（写入内存的缓存管理策略）->论文中的点

ssd细节：
1、块中可以读写的最小单元称为页。页不能独立擦除，只能整块擦除。
（大多数硬盘的页大小是2 KB, 4 KB, 8 KB 或 16 KB。
大多数SSD的块有128或256页，这即表示块的大小也可能是256KB和4MB之间不同的值）
2、最新发布的SSD有两种最普遍的接口：SATA和PCIe。SSD控制器中的处理器接收这些命令并将它们传递给闪存控制器。
(影响性能的一个重要因素是接口。最新发布的SSD最常使用的接口是SATA3.0和PCI Express 3.0。使用SATA3.0接口时，数据传输速度可以达到6 Gbit/s，而在实际上大概能够达到550MB/s。而使用PCIe 3.0可以达到每条8 GT/s，而实际上能达到大概1 GB/s)
3、①读是以页大小对齐的
一次读取少于一页的内容是不可能的。操作系统当然可以只请求一字节，但是SSD会访问整个页，强制读取远超所需的数据。
   ②写是以页大小对齐的
将数据写入SSD的时候，写入的增量也是页大小。因此即使一个写入操作只影响到一个字节，无论如何整个页都会写入。写入比所需更多的数据的行为被称为写入放大。
另外，向某页写入的行为有时候被称为“编置（to program）”一页，因此在大多数关于SSD的出版物和文章中“write 写”和“program编置”是可以互相替换的。
   ③页不能被复写
NAND闪存页只有在其“空闲”着的时候才能写入。当数据改变后，这页的内容被拷贝到一个内部寄存器，此时数据更新而新版本的数据存储在一个“空闲”的页中，
这被称为“读-改-写”操作。数据并非就地更新，因为“空闲”页与原来存储数据的页不是同一个页。一旦数据被硬盘保存，原先的页被标记为“stale（意为 腐败的 不新鲜的）”，直到其被擦除。
   ④擦除以块对齐
页不能被复写，而一旦其成为stale，让其重新空闲下来的唯一方法是擦除他们。但是对单个页进行擦除是不可能的，只能一次擦除整个块。在用户看来，
访问数据的时候只有读和写命令。擦除命令则是当SSD控制器需要回收stale页来获取空闲空间的时候，由其垃圾回收进程触发。
4、写入放大（为写入是按页大小对齐的，任何没有对齐一个或者多个页大小的写操作都会写入大于所需的数据）
用未对齐的方法写入数据会导致在更改和写回硬盘之前需要页读到缓存，这比直接写入硬盘要慢。这个操作被称为读-改-写，且应该尽可能的避免
   ①绝不进行少于一页的写入
   ②对齐写入，以页大小对齐写入，并写入大小为数个页大小的数据块
   ③缓存化小写入（缓存满了之后执行一个大的写入来合并所有的小写入）
4、SSD控制器的一个主要目标是实现损耗均衡，即是将P/E循环在块间尽可能的平均分配。理想上，所有的块会在同一时间达到P/E循环上限并耗尽。
5、FTL（逻辑块寻址和垃圾回收）
   ①逻辑块映射（页级映射和块级映射的折中：日志块映射）
	原因：当一个日志块满了之后，将其和与其在相同逻辑块编号（LBN）的数据块合并到空块中。只需要维护少量的日志块，且允许以页粒度维护。（以防大量小更新）
切换合并：优化：如果将日志里的修改和对应的数据块合并是没有意义的，因为保存合并结果的空块中的数据就是日志块中的数据。只更新数据块映射表中的元数据并将数据块映射表中的数据块切换为日志块会更快。
   ②闪存转化层：它将来自主机的逻辑块地址（LBA）映射为硬盘上的物理块地址（PBA）
   ③垃圾回收：如果页中的数据必须更新，新版本必须写到空页中，而保存之前版本数据的页被标记为stale。当块被stale页充满后，其需要在能够再写入之前进行擦除。
6、高级功能：
   ①TRIM：
	a、SSD主控只会在这些逻辑块地址被复写的时候才知道这些是空闲空间。（结果：其结果就是，擦除操作并非在知道保存有无用数据之后立刻执行，而是被延迟了，这将严重影响性能。）
	b、延迟擦除问题的一个解决方法是TRIM命令，这个命令由操作系统发送，通知SSD控制器逻辑空间中的这些页不会再使用了。
	c、有了这个信息，垃圾回收进程就会知道自己不必再移动这些页，并可以在任何需要的时间擦除它们。
   ②预留空间：
	a、预留空间只是简单的使物理块比逻辑块多，即为主控保留一定比例的，用户不可见的物理块。大多专业级SSD生产商已经包括了一些预留空间，通常是7~25%
	b、预留空间可以吸收高吞吐量写入负载，起到缓冲的作用，为垃圾回收跟上写入操作并重新开始擦除无用块留够时间。
   ③安全擦除：
	a、主控提供ATA安全擦除功能，其作用是当硬盘处于意料之外的状态时恢复其性能
	b、这个命令擦除所有用户写入的数据并重置FTL映射表，但这显然不能克服P/E循环有限造成的物理限制。
   ④原生命令队列：其允许SSD接受来自主机的多个命令，使SSD可以使用内部并行同时完成这些命令
   ⑤一些生产商在他们的SSD结构中设置有超级电容，这个电容设计为存有足够提交总线中所有I/O请求所需的能量以防掉电。
7、ssd中的内部并行：
   ①通道级并行 闪存主控和闪存封装之间的通信通过数个通道。这些通道可以独立或者同时访问。每个独立通道有数个封装共享。
   ②封装级并行 一个通道中的不同封装可以独立访问。交错可以使命令同时在同一个通道中的不同封装中运行。
   ③芯片级并行 一个封装包含两个或者更多的芯片，芯片可以并行独立访问。注：芯片通常也被称为核心（chips are also called “dies”）
   ④面级并行 一个芯片包含两个或者更多的面。相同的操作（读、写或者擦除）可以在芯片中多个面上同时运行。面包含了块，块包含了页。面也包含了寄存器（小RAM缓存），其用在面级操作上
8、访问模式：
如果I/O操作开始的逻辑块地址（LBA）直接跟着前一个I/O操作的最后LBA，则称值为顺序访问。如果不是这样，那这个I/O操作称为随机访问。

各位老师同学早上好，我是软件工程18级2班的庄喆，指导老师付少锋老师，本次开题题目基于固态硬盘的R-树优化方法。
接下来介绍本次开题共3个模块，第一个模块背景介绍，本次开题主要涉及固态硬盘和R-树，固态硬盘相较于机械硬盘有着更快的读写速度，而R-树则是一种存储空间数据的数据结构
R-树在当今广泛运用于GIS app，多用于描述一个空间（这里是一个地理围栏的例子，顾名思义，围栏就好比猪笼，用于判断是否在这个区域中，或者说在某个区域），
其特点就是数据量大，还要求时效性快。利用一个更快的读写硬盘作为媒介来优化R-树的查找更新是势在必行。
简单介绍了下背景，接下来介绍一下至今已有的优化算法，既然是基于固态硬盘，对固态来说在读写操作主要的缺陷在于写速度慢于读速度，由于它有2种访问模式，两两组合会有4种读写模式，其中随机写
的速度最慢，原因就是固态硬盘中一般写之前需要进行块擦除，如果这个时候写2条指令，两条指令基于不同的块，那么就需要先擦除这两块的内容再进行写操作，造成写入放大。
为了解决这样的问题，人们想法一般是想用更少的写操作，即使是要写，也尽可能的转化为顺序写，前3种方法就是运用了这样的思想，最后一种优化R树索引从而使数据结构减少分裂，进而减少随机写。
从这里可以看出，这里前3者都采用一种聚集的思想，将多次读多次写尽可能的组成一次读写（当然读写要分离）这里后面可以加以改进。
最后说一下我自己接下来的准备，基于内部的控制器，还有很多特性还没被使用，后续研究看看能不能成为入手点。最后继续阅读大量文章，分析，发现不足，优化，实验。
谢谢各位老师同学的聆听！


开题后：
基于闪存固态硬盘的空间数据结构查询更新优化：
（1空间数据结构、2优化方案、3SQLlite、4固态硬盘阵）
第一周期：
1.分析各种数据结构：
	格子文件及其变形（散列方法）：
		
	四又树及其变形树：
	k-d树及其变形树：
	R树及其变形树：
2.爬取数据信息（实验用）；
3.选取数据库存储数据（SQLlite）；
4.固态硬盘模拟器（疑惑：固态硬盘模拟器是模拟一个新的磁盘（像C盘D盘），还是将硬盘中的一块数据模拟成固态硬盘，我们能从固态硬盘获得这块区域的读写效率）：https://blog.csdn.net/Eidosper/article/details/46458469
	Flashsim，SSDSim，Disksim，SSD Extension
	将固态硬盘模拟器装在ubentu上面，然后将其搭建好数据库的环境，将数据库的信息写进去（固态硬盘模拟器中），进行增删改查查看效率；
